@charset "utf-8"

/* CSS document */

/*All CSS entries consist of a location, a property at that location, and a style to apply to that property*/

/*CSS Selection rules:
	1. If there is a selector that selects your element, then the rules of that selector are the ones used.
	2. If not, search for a parent who defines the rule
	3. If none found, use the default value
	4. If multiple rules are found, then use the most specific selector. If there are multiple equally most specific conflicting rules, use the last rule
*/

/*CSS is called a cascading style sheet because using different style sheets generated by the author, the users, and the browsers, rules cascade down, and the final output is the lowest rule 
	The way this selection goes:
	1. gather all the style sheets and rules for a given attribute
	2. Sort rules by author, reader, and browser (in order of importance unless the reader overwrote a rule with the !important flag)
	3. Sort rules by selection specificity
		a. start with 000
		b. 1st number - +1/id
		c. 2nd number - +1/class or pseudo-class
		d. 3rd number - +1/element name
		e. The larger the resulting number, the more specfic the selector
	4. Sort any conflicting rules by location
*/

/*CSS sees elements in a box model:
	on the inside there is the content box - which holds the things within the element
	Surrounding this is a transparent padding - background-color extends here
	Surrounding this is an optional border
	Surrounding this is a transparent margin - background-color does not apply here

	The width of these elements is as such:
	Total width = left_margin_width + left_border_width + left_margin_width + element_width (specified by width property) + right_margin_width + right_border_width + right_margin_width
	Same thing for height

	If margins, padding, and border are unspecified then width = total_width
	If width is not specified, it defaults to auto - it will fill all available space
*/

p /*This is called a selector*/{
	background-color: red;	/* An entry is called a rule */
	border: 1px solid gray;
	/*Different font properties:*/
	font-family: Verdana;
	/*5 different font families: 
		sans-serif - no serifs - considered more readable on web browsers
		serif - have barbs/hooks (newspaper fonts)
		monospace - each letter takes up the same amount of space (used mostly for code examples)
		cursive - fonts that look handwritten
		fantasy - decorative stylized fonts
	*/
	/* You can specify several fonts at the same time. It is a good idea to specify a general font family at the end
		The browser will try to match the first font specified that it can
		Put double quotes around fonts with multiple words in the name
	*/
	font-family: Verdana, Geneva, Arial, sans-serif;
	/*To specify font size you can use either pixels or percents. Pixels are determined
		directly from the screen resolution. Percents determine a size based on the size of
		the parent font. em can be used to specify a scaling value

		There are also several built-in keywords for font size:
		xx-small, x-small, small, medium, large, x-large,xx-large

		A good practice for design is to specify the body with either px or a keyword, and then make 
		everything else relative to this size - thus if any changes are made, they only have to be done to the body
		keywords are preferred to pixels since some browsers have issues resizing pixels when a user changes the font size
		*/
	font-size: 14px;

	/* color is specified based on a 0-100% each of red, blue, and green
		can specify color by name, by individual percentages, and by a hex code which is shorthand for percentages
		The color property controls the foreground color, including text-color and border color, etc.
	*/
	color:silver;
	color: rgb(80%, 40%, 0%);
	color: rgb(204, 102, 0);	/* 0 to 255 inclusive*/
	color: #cc6600;	/*first 2 bytes are red, then gree, then blue. If the two bytes for each of the colors are the same, can abbreviate: #cc6600 = #c60*/
	/* web-safe colors are for users who only have limited-hue monitors - rare now
		when deciding which color to use, try to have a high contrast between text and background

	/* line-height changes the spacing between each line. This will set the height of each line
		to 1.6x the font-size
	*/
	line-height: 1.6em;
	/*line height can also be used without a realtive measure (em %). This will make line height to be that number relative to itself
	*/
	line-height: 1;

	/*font-weight determines the how bold the font will look. It comes with keywords:
	bold and normal. There are also relative keywords - bolder and lighter which use the parents boldness as reference
	however, since many fonts do not have changes in boldness degree, the elements are largely useless
	You can also set this to a value - but again keywords are preferred*/
	font-weight: bold;
	
	/*text decoration can add things to text like underline, line-throught,
		underline overline
	text-decoration: underline;


	/*font-style can be used to specify the way the font looks.
	Two values for this rule are italic and oblique. Italic is a speicialized version of the font 
	being used that make it appear italic. If italic versions of the font are not avaialable, oblique
	font, which is just a slanted version of the normal font is used.
	*/
	font-style: oblique;	

	/*text align sets the alignment of the text - center, left, right, etc.
	Actually sets the alignment of all inline elements - text, img, etc.
	should only be used with block elements - no effect if used on an inline element
	also inherited - so if used on a div, all block elements in div will inherit it, unless overwritten
	*/
	text-align: center;

	/* Can add a background image for visual representation: */
	background-image: url(some_image.jpg);
	/*Also have control over how it is displayed and where it appears:*/
	background-repeat: no-repeat;
	background-position: top left;

	/*can set the margin and padding of the element */
	padding: 25px;
	padding-left: 80px;	/*overrides left-padding, but if this and previous are switched, then this rule would be ignored */
	margin: 30px;
	/* you can also set these with short hand*/
	padding: 0px 20px 30px 40px;	/*top, right, bottom, left */
	margin: 0px 20px;	/* combines top-bottom left-right */
	/* can also use shorthand:
		border, background, font */

	/*can also set border width, color, and style:*/
	border-color: blue;
	border-width: thin;
	border-style: dashed;
}



/* If rules for several elements is the same, we can combine them: */
h1, h2 {
	font-family: sans-serif;
	color:gray;
}

/* To add a different element specific rule, just add it below: */
h1{
	border-bottom: 1px solid black;
}

/*Children of styled elements inherit certain rules (like font-family). If you want to set a rule for the whole page, you can just set this in the body */
body{
	font-family: sans-serif;
}

/* After a rule is inherited from a parent, if the child selector also has the same rule set to a different value, it will override the inheritance for that element and all its children */
em{
	font-family: serif;
}
/* CSS always uses the most specific rules it can for an element - uses em rules versus body rules */
/*most font related rules are inherited, whereas rules that affect appearance are usually not inherited. */

/* If you want to style a specfic subset of elements (ex. certain <p>, one or two <em> etc) then you can use a class. When a tag is created in HTML, it can set the class attribute
The in CSS we can style that class a specific way. */
h1.test_class{
	color:green;
}
/* If you want to specify multiple elements to have the same class properties, you can use: */
blockquote.test_class, h1.test_class{
	font-family: sans-serif;
}
/* If you want all elements of the class to have the same properties:*/
.test_class{
	font-size: 34px;
}

/*in the same way you can specify elements with id if there should only be one instance of this element*/
#test_id{
	font-family: serif;
}
p#test_id{
	color:red;
}

/* You can specify which elements you want to inherit a certain characteristic:*/
div h2{		/* so any h2 element in a div will get this property*/
	color:red;
}
#some_div_id h2{	/* any element that has id some_div_id will pass down the rule to any h2 elements it has */
	color:green;
}
/* the rules above will be inherited by all the h2s that meet the criteria. You can also select a direct descendent */
#some_div_id > h2{
	color:black;
}

/* you can also chain these inheritances for more complex specification */
#some_div_id blockquote h2{
	color:blue;
}

/* To style a elements, you can use psuedo-classes to specify different rules for different states. If a link is multiple states, the lowest rule has precedance. Can also use psuedo-classes with other elements */
a:link {
	color : green;
}

a:visited{
	color:red;
}

a:hover{
	color:yellow;
}

a:focus{
	color : purple;	/* browser has the focus on the link - not well supported*/
}

a:active{
	color:black;/*User first clicks on link - not well supported*/
}

/* If you use the general setting, all states will have the same rules: */
a{
	color:red;	/* makes all states be red */
}


/* FLOATS 
floats allow you to position your elements so your other elements flow around it. Must be specified with a width. Can float left or right
When an element is floated it is removed from the normal flow
block elements can be positioned under the floated element as if it wasnt there.
Inline elemnets respect the boundaries of the floated element and will flow around it
Can also float inline elements - often done with images to get text to wrap around it
*/
#some_div{
	float:right;
	width:200px;
}
/*
The clear property will prevent a floating element from trespassing on that element:
*/
#some_other_div{
	clear:right;
}
/*Layout can be frozen or liquid in terms of how it reacts to the browser resizing.
frozen will not change
liquid will modify its width with respect to the new font-size: 

Also there is jello which is in between. This is a frozen layout that gets centered in the middle of the screen
*/
#centered_div{
	margin-left:auto;
	margin-right:auto;
}

/* ABSOLUTE POSITIONING
You can also specify the position that an element has in the page directly

Absolutely positioned elements are taken completely out of the flow - both block and inline elements ignore it 
absolutely positioned elements can be placed on top or bottom of each other with z-order 
default positioning is static - browser decides where element goes
Can also use fixed position, so element's position is relative to browser window, not page
Also there is relative positioning - element is flowed onto page as normal, but then offset before display - used for special effects
can absolutely position any element
absolute positioning is relative to the nearest containing block that is also positioned
*/
#abs_pos_div{
	position: absolute;
	top: 100px;	/* 100px from the top */
	left:300px; /* 300px from the left */
	width: 50px;
}
/* To use relative positioning, you still specify the location. Then the element is placed relative to those offsets from the location it would be at if there were not offsets
*/



/* TABLES
Cells can be styled just like everything else, but instead of margins they use border-spacing
*/
td, th{
	border-spacing: 10px;
	border-collapse: collapse;	/* To eliminate spacing between cell elements */
}

/* SPECIFIC LIST STYLING
Some specific rules you can set for lists 
*/
li{
	list-style-type: disc;	/* the marking in front of the list entry */
	list-style-image: url(path/to/some/image.gif);	/* If you want a custom marking */
	list-style-position: inside;	/* determines wrapping behavior of text. if inside, text wraps inside the marking, otherwise it wraps under the marking */
}